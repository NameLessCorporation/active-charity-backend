// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: organization/organization.proto

package organization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Organization_CreateOrganizationV1_FullMethodName           = "/proto.organization.Organization/CreateOrganizationV1"
	Organization_GetOrganizationV1_FullMethodName              = "/proto.organization.Organization/GetOrganizationV1"
	Organization_CreateOrganizationInviteCodeV1_FullMethodName = "/proto.organization.Organization/CreateOrganizationInviteCodeV1"
)

// OrganizationClient is the client API for Organization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationClient interface {
	CreateOrganizationV1(ctx context.Context, in *CreateOrganizationV1Request, opts ...grpc.CallOption) (*CreateOrganizationV1Response, error)
	GetOrganizationV1(ctx context.Context, in *GetOrganizationV1Request, opts ...grpc.CallOption) (*GetOrganizationV1Response, error)
	CreateOrganizationInviteCodeV1(ctx context.Context, in *CreateOrganizationInviteCodeV1Request, opts ...grpc.CallOption) (*CreateOrganizationInviteCodeV1Response, error)
}

type organizationClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationClient(cc grpc.ClientConnInterface) OrganizationClient {
	return &organizationClient{cc}
}

func (c *organizationClient) CreateOrganizationV1(ctx context.Context, in *CreateOrganizationV1Request, opts ...grpc.CallOption) (*CreateOrganizationV1Response, error) {
	out := new(CreateOrganizationV1Response)
	err := c.cc.Invoke(ctx, Organization_CreateOrganizationV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) GetOrganizationV1(ctx context.Context, in *GetOrganizationV1Request, opts ...grpc.CallOption) (*GetOrganizationV1Response, error) {
	out := new(GetOrganizationV1Response)
	err := c.cc.Invoke(ctx, Organization_GetOrganizationV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationClient) CreateOrganizationInviteCodeV1(ctx context.Context, in *CreateOrganizationInviteCodeV1Request, opts ...grpc.CallOption) (*CreateOrganizationInviteCodeV1Response, error) {
	out := new(CreateOrganizationInviteCodeV1Response)
	err := c.cc.Invoke(ctx, Organization_CreateOrganizationInviteCodeV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationServer is the server API for Organization service.
// All implementations should embed UnimplementedOrganizationServer
// for forward compatibility
type OrganizationServer interface {
	CreateOrganizationV1(context.Context, *CreateOrganizationV1Request) (*CreateOrganizationV1Response, error)
	GetOrganizationV1(context.Context, *GetOrganizationV1Request) (*GetOrganizationV1Response, error)
	CreateOrganizationInviteCodeV1(context.Context, *CreateOrganizationInviteCodeV1Request) (*CreateOrganizationInviteCodeV1Response, error)
}

// UnimplementedOrganizationServer should be embedded to have forward compatible implementations.
type UnimplementedOrganizationServer struct {
}

func (UnimplementedOrganizationServer) CreateOrganizationV1(context.Context, *CreateOrganizationV1Request) (*CreateOrganizationV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationV1 not implemented")
}
func (UnimplementedOrganizationServer) GetOrganizationV1(context.Context, *GetOrganizationV1Request) (*GetOrganizationV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationV1 not implemented")
}
func (UnimplementedOrganizationServer) CreateOrganizationInviteCodeV1(context.Context, *CreateOrganizationInviteCodeV1Request) (*CreateOrganizationInviteCodeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationInviteCodeV1 not implemented")
}

// UnsafeOrganizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationServer will
// result in compilation errors.
type UnsafeOrganizationServer interface {
	mustEmbedUnimplementedOrganizationServer()
}

func RegisterOrganizationServer(s grpc.ServiceRegistrar, srv OrganizationServer) {
	s.RegisterService(&Organization_ServiceDesc, srv)
}

func _Organization_CreateOrganizationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).CreateOrganizationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_CreateOrganizationV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).CreateOrganizationV1(ctx, req.(*CreateOrganizationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_GetOrganizationV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).GetOrganizationV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_GetOrganizationV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).GetOrganizationV1(ctx, req.(*GetOrganizationV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organization_CreateOrganizationInviteCodeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationInviteCodeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationServer).CreateOrganizationInviteCodeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Organization_CreateOrganizationInviteCodeV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationServer).CreateOrganizationInviteCodeV1(ctx, req.(*CreateOrganizationInviteCodeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Organization_ServiceDesc is the grpc.ServiceDesc for Organization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.organization.Organization",
	HandlerType: (*OrganizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationV1",
			Handler:    _Organization_CreateOrganizationV1_Handler,
		},
		{
			MethodName: "GetOrganizationV1",
			Handler:    _Organization_GetOrganizationV1_Handler,
		},
		{
			MethodName: "CreateOrganizationInviteCodeV1",
			Handler:    _Organization_CreateOrganizationInviteCodeV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organization/organization.proto",
}
