// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: activity/activity.proto

package activity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_GetActivityListV1_FullMethodName = "/proto.activity.Auth/GetActivityListV1"
	Auth_TrackStepsV1_FullMethodName      = "/proto.activity.Auth/TrackStepsV1"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	GetActivityListV1(ctx context.Context, in *GetActivityListV1Request, opts ...grpc.CallOption) (*GetActivityListV1Response, error)
	TrackStepsV1(ctx context.Context, in *TrackStepsV1Request, opts ...grpc.CallOption) (*TrackStepsV1Response, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetActivityListV1(ctx context.Context, in *GetActivityListV1Request, opts ...grpc.CallOption) (*GetActivityListV1Response, error) {
	out := new(GetActivityListV1Response)
	err := c.cc.Invoke(ctx, Auth_GetActivityListV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) TrackStepsV1(ctx context.Context, in *TrackStepsV1Request, opts ...grpc.CallOption) (*TrackStepsV1Response, error) {
	out := new(TrackStepsV1Response)
	err := c.cc.Invoke(ctx, Auth_TrackStepsV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations should embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	GetActivityListV1(context.Context, *GetActivityListV1Request) (*GetActivityListV1Response, error)
	TrackStepsV1(context.Context, *TrackStepsV1Request) (*TrackStepsV1Response, error)
}

// UnimplementedAuthServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) GetActivityListV1(context.Context, *GetActivityListV1Request) (*GetActivityListV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityListV1 not implemented")
}
func (UnimplementedAuthServer) TrackStepsV1(context.Context, *TrackStepsV1Request) (*TrackStepsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackStepsV1 not implemented")
}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_GetActivityListV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityListV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetActivityListV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_GetActivityListV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetActivityListV1(ctx, req.(*GetActivityListV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_TrackStepsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackStepsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).TrackStepsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_TrackStepsV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).TrackStepsV1(ctx, req.(*TrackStepsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.activity.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivityListV1",
			Handler:    _Auth_GetActivityListV1_Handler,
		},
		{
			MethodName: "TrackStepsV1",
			Handler:    _Auth_TrackStepsV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity/activity.proto",
}
